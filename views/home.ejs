<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
    .ls-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        padding: 0 4rem;
    }

    .ls-container > canvas {
        max-height: 60vh !important;
        max-width: calc(50vw - calc(4rem + 4rem));
        margin: 0 auto;
    }

    @media only screen and (max-width: 1500px) {
        .ls-container {
            padding: 1rem;
        }

        .ls-container > canvas {
            max-height: 60vh !important;
            max-width: calc(50vw - calc(4rem + 1rem));
        }
    }

    @media only screen and (max-width: 1024px) {
        .ls-container {
            padding: 1rem;
            grid-template-columns: 1fr;
        }

        .ls-container > canvas {
            max-height: 60vh !important;
            max-width: calc(100vw - calc(4rem + 1rem));
        }
    }
</style>

<div class="ls-container">
    <canvas id="request-amount-chart" height="150" class="mb-5"></canvas>
    <canvas id="request-resource-chart" height="150" class="mb-5"></canvas>

    <canvas id="user-agent-chart" height="150" class="mb-5"></canvas>
    <canvas id="email-sent-chart" height="150" class="mb-5"></canvas>
</div>

<script type="module" async>
    const userAgentData = JSON.parse(`<%- JSON.stringify(userAgentData) %>`);
    const requestData = JSON.parse(`<%- JSON.stringify(requestData) %>`);
    const requestedResourcesData = JSON.parse(`<%- JSON.stringify(requestedResourcesData) %>`);
    const sentEmails = JSON.parse(`<%- JSON.stringify(sentEmails) %>`);

    const res = await fetch("/assets/colors.json");
    const colors = await res.json();

    var userAgentDataCount = {};
    userAgentData.forEach((el) => {
        const agent = el.user_agent;
        const key = `${agent.family}/${agent.major} ${agent.os.family}/${agent.os.major}`;

        userAgentDataCount[key] = userAgentDataCount[key] ? userAgentDataCount[key] + 1 : 1;
    });

    var requestAmount = {};
    requestData.forEach((el) => {
        requestAmount[el.page_name] = requestAmount[el.page_name] ? requestAmount[el.page_name] + 1 : 1;
    });

    var resources = {};
    requestedResourcesData.forEach((el) => {
        resources[el.requested_resource] = resources[el.requested_resource] ? resources[el.requested_resource] + 1 : 1;
    });

    var emails = {};
    for (var i = 29; i > -1; i--) {
        let date = new Date(Date.now() - 60 * 60 * 24 * 1000 * i);
        let label = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate().toString().length > 1 ? date.getDate() : `0${date.getDate()}`}`;
        emails[label] = 0;
    }
    sentEmails.forEach((el) => {
        let date = new Date(el.timestamp);
        let label = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate().toString().length > 1 ? date.getDate() : `0${date.getDate()}`}`;
        emails[label] = emails[label] + 1;
    });

    const ctx = document.getElementById("request-amount-chart").getContext("2d");
    var requestAmountChart = returnChart(requestAmount, ctx, "Most accessed pages of the Month", "x");

    const ctx2 = document.getElementById("user-agent-chart").getContext("2d");
    var userAgentChart = returnChart(userAgentDataCount, ctx2, "Devices accessing lukasstaub.dev in the last 24h", "y");

    const ctx3 = document.getElementById("request-resource-chart").getContext("2d");
    var resourcesChart = returnChart(resources, ctx3, "Most requested resources of the Month");

    const ctx4 = document.getElementById("email-sent-chart").getContext("2d");
    var emailsChart = returnChart(emails, ctx4, "Number of emails sent daily in the last 30 Days", "x");

    function returnChart(objectWithCount, ctx, title, orientation = "y", type = "bar") {
        return new Chart(ctx, {
            type,
            data: {
                labels: Object.keys(objectWithCount),
                datasets: [
                    {
                        label: title,
                        data: Object.keys(objectWithCount).map((key) => objectWithCount[key]),
                        backgroundColor: Object.keys(objectWithCount).map((_) => colors[Math.floor(Math.random() * colors.length)]),
                        borderWidth: 1,
                    },
                ],
            },
            options: {
                indexAxis: orientation,
            },
        });
    }
</script>
